apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: ticket-event-handler
  namespace: mocks
  labels:
    app: ticket-event-handler
    example: ticket-event-handler
spec:
  deps: |-
    { 
      "name": "ticket-event-handler",
      "version": "1.0.0",
      "dependencies": {
            "axios": "^0.21.1",
            "@sendgrid/mail": "^7.4.6"
      }
    }
  maxReplicas: 1
  minReplicas: 1
  resources:
    limits:
      cpu: 20m
      memory: 32Mi
    requests:
      cpu: 10m
      memory: 16Mi
  env:
    - name: SENDGRID_API_KEY
      value: "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"
    - name: SENDGRID_SENDER_EMAIL
      value: "rafael@caziraghi.com.br"
    - name: SAP_C4C_API_KEY
      value: "AjMKyfE8jnWaDZTMRjWQzXHbxDhZ45Pm"
  source: |-
    const axios = require("axios").default;
    const sgMail = require("@sendgrid/mail");
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    const C4C_GATEWAY_URL = process.env["SAP_CLOUD_FOR_CUSTOMER_TICKET_API_5FBF7B9A_1E4D_472C_B1A1_1DCE562AED58_GATEWAY_URL"];
    const CONFIRMATION_SUBJECT = "Ticket Creation Confirmation";

    // Interceptor to log the request
    axios.interceptors.request.use(request => {
      console.log('Request: ', JSON.stringify(request, null, 2))
      return request
    })

    // Interceptor to log the response
    axios.interceptors.response.use(response => {
      console.log('Response: ', response);
      return response
    })

    module.exports = { 
      main: async function (event, context) {
        if (event.data && event.data["entity-id"] && event.data["entity-id"]["entity-id"]) {
          const objectID = event.data["entity-id"]["entity-id"];
          console.log(`Processing ticket with ObjectID: ${objectID}`);
          const serviceRequestResponse = await getMockServiceRequest(objectID);
          // const serviceRequestResponse = await getServiceRequest(objectID);
          if (serviceRequestResponse && serviceRequestResponse.data && serviceRequestResponse.data.d.results && serviceRequestResponse.data.d.results.length !== 0 && serviceRequestResponse.data.d.results[0].ID)  {
            const serviceRequestID = serviceRequestResponse.data.d.results[0].ID;
            const reporterPartyResponse = await getMockReporterParty(objectID);
            // const reporterPartyResponse = await getReporterParty(objectID);
            if (reporterPartyResponse && reporterPartyResponse.data && reporterPartyResponse.data.d.results && reporterPartyResponse.data.d.results.length !== 0 && reporterPartyResponse.data.d.results[0].PartyName && reporterPartyResponse.data.d.results[0].Email)  {
              const name = reporterPartyResponse.data.d.results[0].PartyName;
              const email = reporterPartyResponse.data.d.results[0].Email;
              console.log(`Name: ${name}; Email: ${email}`);
              const emailBodyText = `Hello ${name}, This is to confirm that your ticket was created. Thanks, The CX C4C Team` 
              const emailBodyHtml = `Hello ${name},<br><br>This is to confirm that your ticket with ID ${serviceRequestID} was created.<br><br>Thanks,<br>The CX C4C Team` 
              await sendEmail(email, CONFIRMATION_SUBJECT, emailBodyText, emailBodyHtml);
            } else {
              console.log('No Email');
            }
          } else {
            console.log('No Result');
          }
        } else {
            console.log('No ObjectID to be processed.');
        }
      }
    }

    // Mock API call
    async function getMockServiceRequest(objectID) {
      let response = null;
      try {
        const url = `${C4C_GATEWAY_URL}/ServiceRequests`;
        const filter = {"where":{"ObjectID":objectID}};
        response = await axios.get(url, {
          params: {
            filter: encodeURI(JSON.stringify(filter))
          }
        });
      } catch (error) {
        console.error(error);
      } finally {
        return response;
      } 
    }

    // Actual API call
    async function getServiceRequest(objectID) {
      let response = null;
      try {
        const url = 'https://sandbox.api.sap.com/sap/c4c/odata/v1/c4codataapi/ServiceRequestCollection';
        const config = {
          timeout: 20000,
          headers: {
            'APIKey': process.env.SAP_C4C_API_KEY,
            'DataServiceVersion': '2.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          params: {
            $filter: `ObjectID eq '${objectID}'`
          }
        };
        response = await axios.get(url, config);
      } catch (error) {
        console.error(error);
      } finally {
        return response;
      }  
    }

    // Mock API call
    async function getMockReporterParty(objectID) {
      let response = null;
      try {
        const url = `${C4C_GATEWAY_URL}/ServiceRequestPartys`;
        const filter = {"where":{"and":[{"ParentObjectID":objectID},{"RoleCategoryCodeText":"Reporter Party"}]}};
        response = await axios.get(url, {
          params: {
            filter: encodeURI(JSON.stringify(filter))
          }
        });
      } catch (error) {
        console.error(error);
      } finally {
        return response;
      }
    }

    // Actual API call
    async function getReporterParty(objectID) {
      let response = null;
      try {
        const url = `https://sandbox.api.sap.com/sap/c4c/odata/v1/c4codataapi/ServiceRequestCollection('${objectID}')/ServiceRequestParty`;
        const config = {
          timeout: 20000,
          headers: {
            'APIKey': process.env.SAP_C4C_API_KEY,
            'DataServiceVersion': '2.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          params: {
            $filter: `RoleCategoryCodeText eq 'Reporter Party'`
          }
        };
        response = await axios.get(url, config);
      } catch (error) {
        console.error(error);
      } finally {
        return response;
      } 
    }

    async function sendEmail(email, subject, text, html) {
      const msg = {
        to: email, 
        from: process.env.SENDGRID_SENDER_EMAIL, 
        subject: subject,
        text: text,
        html: html
      }
      return sgMail
        .send(msg)
        .then(() => {
          console.log("Mail sent");
        }, error => {
          console.error(error);
          if (error.response) {
            console.error(error.response.body)
          }
      });
    }